// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Kiosk {
    id              String      @id @default(cuid())
    address         String
    scope           Scope?      @relation(fields:[scopeId], references:[id], onDelete: NoAction)
    scopeId         String?
    serialLogs      SerialLog[]

    @@index([scopeId])
}

model SerialLog {
    id              String      @id @default(cuid())
    fn              String
    tx              Bytes
    rx              Bytes
    kiosk           Kiosk       @relation(fields:[kioskId], references:[id], onDelete: NoAction)
    kioskId         String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([kioskId])
}

model Scope{
    id             String      @id @default(cuid())
    name           String
    rootId         String?
    root           Scope?      @relation("RootChildren", fields:[rootId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children       Scope[]     @relation("RootChildren")
    kiosks         Kiosk[]
    users          User[]

    @@index([rootId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    scope         Scope?    @relation(fields:[scopeId], references:[id], onDelete: NoAction)
    scopeId       String?
    name          String?
    image         String?
    email         String?   @unique
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]

    @@index([scopeId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
