import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";
import { cm_serial_info, serial } from "../utils/const";
import { useContext, useEffect, useState } from "react";
import ModalSerial from "../components/ModalSerial";
import { useSerial } from "../components/ProviderSerial";
import { useDev } from "../components/ProviderDev";


const Home: NextPage = () => {
    //const hello = api.example.hello.useQuery({ text: "from tRPC" });

    const dev = useDev()
    const { portState, subscribe, tx, rx } = useSerial();

    const [input, setInput ] = useState("");

    useEffect(() => {
        const unsubscribe = subscribe((message) => {
            const { value, timestamp } = message;

            console.log("message", message);
        });
        return unsubscribe;
    }, []);

    const onChange = (e) => {
        setInput(e.target.value)
    }
    const onSubmit = async (e) => {
        const bytes = Uint8Array.from(Buffer.from(input, 'hex'));
        tx(bytes)
        const res = await rx()
    }

    const pressButton = async (button: Uint8Array) => {
        tx(button)
        const res = await rx()

        let handshake = new Uint8Array([...res, 0])
        handshake[handshake.length-1] = res[res.length-1]!
        handshake[handshake.length-2] = 0

        tx(handshake)
        const res_hand = await rx()

        if (res_hand === res) {
            console.log("Handshake success")
        }else{
            console.log("Handshake failed")
        }
    }

  return (
    <>
      <Head>
        <title>Jacks Beans</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        
      
        {portState!= "open" ? <ModalSerial/> : null 
        }

        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Jacks Beans
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
          <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.cappuccino)}
            >
                <h3 className="text-2xl font-bold text-center">Cappuccino</h3>
            </button>
            <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.latte)}
            >
                <h3 className="text-2xl font-bold text-center">Latte</h3>
            </button>
            <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.americano)}
            >
                <h3 className="text-2xl font-bold text-center">Americano</h3>
            </button>
            <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.white_coffee)}
            >
                <h3 className="text-2xl font-bold text-center">White Coffee</h3>
            </button>
            <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.hot_chocolate)}
            >
                <h3 className="text-2xl font-bold text-center">Hot Chocolate</h3>
            </button>
            <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.mocha)}
            >
                <h3 className="text-2xl font-bold text-center">Mocha</h3>
            </button>
            <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.steam)}
            >
                <h3 className="text-2xl font-bold text-center">Steam</h3>
            </button>
            <button
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
              onClick={() => pressButton(serial.button_commands.other)}
            >
                <h3 className="text-2xl font-bold text-center">Other</h3>
            </button>
          </div>
          {/*
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            
          </div>
          */}
        </div>
        <div  className="flex flex-auto"/>
        <footer className="container flex justify-center flex-row-reverse m-10">   
            { dev ?
                <div className="container flex justify-center gap-4">
                    <input  className="flex max-w-xs gap-4 rounded-xl bg-white/10 p-2 text-white hover:bg-white/20 min-w-[50%]"  type="text" name="name" onChange={onChange}/>
                    <input className="flex max-w-xs min-w-fit gap-4 rounded-xl bg-white/10 p-2 text-white hover:bg-white/20"  type="submit" value="Send" onClick={onSubmit}/>
                </div>
            
            : null
            } 
        </footer>
    
        
      </main>

    </>
  );
};

export default Home;


