import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";
import { useEffect, useState } from "react";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const [port, setPort] = useState<SerialPort>();
  const [devTools, setDevTools] = useState<boolean>(false);


  useEffect(() => {
    if (!("serial" in navigator)){
        console.log("The serial port is not supported in this browser.")
        return;
    }

    checkConnection();
    const interval = setInterval(() => {
        if (port) {
            clearInterval(interval)
        }else {
            checkConnection();
        }
    }, 3000);


    return () => clearInterval(interval);

  }, [port]);

  const requestSerial = async () => {
    try {
        const portRequest = await navigator.serial.requestPort({
            filters: [{ usbVendorId: 0x2341, usbProductId: 0x0043 }]
        });

        setPort(portRequest);
    }catch(error) {
        console.log(error);
    }
    
  
  };

  const checkConnection = async () => {
    console.log("Checking connection...")
    const ports = await navigator.serial.getPorts();

    // Look for the correct serial port
    if (ports.length > 0){
        
        setPort(ports[0]);
        
    }
  }


  return (
    <>
      <Head>
        <title>Jacks Beans</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Jacks Beans
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <div
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white"
            >
                {
                    port ?
                        <h3 className="text-2xl font-bold text-center"> Coffee Machine Connected</h3> 
                    :
                        <>
                        <h3 className="text-2xl font-bold text-center">Coffee Machine Connection Failed</h3>
                        <div className="text-lg text-center">
                                Check USB connection to machine, connection is retried automatically.
                        </div>    
                        </>
                }
            </div>
            <div
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white"
            >
              <h3 className="text-2xl text-center font-bold">Authorisation Failed </h3>
              <h3 className="text-2xl text-center font-bold"/> 
              <div className="text-lg text-center">
                Unable to log into the app. Please sign in.
              </div>
              <AuthShowcase />
            </div>
    
          </div>
          {/*
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            
          </div>
          */}
        </div>
        <div  className="flex flex-auto"/>
        <footer className="container flex justify-start flex-row-reverse gap-4 p-4">
            <button 
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                onClick={() => setDevTools(!devTools)}>
                <h1 className="text-lg">Dev Tools</h1>
            </button>
            {
                devTools ?
                <>
                <button 
                    className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                    onClick={requestSerial}>
                    <h1 className="text-lg">Authorise Serial</h1>
                </button>
                </>

                : null

            }
          
        </footer>
      </main>

    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
