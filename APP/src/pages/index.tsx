import { type NextPage } from "next";
import Head from "next/head";

import { press_button } from "../utils/serial";
import { useSerial } from "../components/ProviderSerial";
import { VscDebugDisconnect, VscVmConnect } from "react-icons/vsc";
import { useAppState } from "../components/ProviderAppState";
import Link from "next/link";


const Home: NextPage = () => {

    const { connected, command, authConnect } = useSerial();
    const { kiosk } = useAppState();

    return (
    <>
        <Head>
        <title>Jacks Beans</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="flex min-h-screen flex-col items-center justify-center bg-[#232020]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Jacks Beans
            </h1>
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "cappuccino")}
            >
                <h3 className="text-2xl font-bold text-center">Cappuccino</h3>
            </button>
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "latte")}
            >
                <h3 className="text-2xl font-bold text-center">Latte</h3>
            </button>
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "americano")}
            >
                <h3 className="text-2xl font-bold text-center">Americano</h3>
            </button>
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "white_coffee")}
            >
                <h3 className="text-2xl font-bold text-center">White Coffee</h3>
            </button>
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "hot_chocolate")}
            >
                <h3 className="text-2xl font-bold text-center">Hot Chocolate</h3>
            </button>
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "mocha")}
            >
                <h3 className="text-2xl font-bold text-center">Mocha</h3>
            </button>
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "steam")}
            >
                <h3 className="text-2xl font-bold text-center">Steam</h3>
            </button>
            <button
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-6 text-white hover:bg-white/20"
                onClick={() => press_button(command, "other")}
            >
                <h3 className="text-2xl font-bold text-center">Other</h3>
            </button>
            </div>
            {/*
            <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
                {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            </div>
            */}
        </div>
        <div  className="flex flex-auto"/>
        <footer className="container flex justify-right gap-2 flex-row-reverse m-10">   
            {
                !connected
                ?
                <button onClick={() => {authConnect()}}>
                    <VscDebugDisconnect className="bg-red-500 p-1 rounded-md" size={42} color="white"/>
                </button>
                :
                null                
            },
            {
                kiosk.valid === false
                ?
                <Link href="/admin/kiosk" >
                    <VscVmConnect className="bg-red-500 p-1 rounded-md" size={42} color="white"/>
                </Link>
                :
                null
            }
        </footer>     
        </main>

    </>
    );
};

export default Home;


